name: Wedding Website CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests (Laravel)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
    
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      working-directory: ./backend
      run: composer install --prefer-dist --no-progress
    
    - name: Create .env file
      working-directory: ./backend
      run: |
        cp .env.example .env
        sed -i 's|DB_CONNECTION=mysql|DB_CONNECTION=sqlite|' .env
        sed -i 's|DB_DATABASE=wedding_website|DB_DATABASE=/home/runner/work/Weeding/Weeding/backend/database/database.sqlite|' .env
    
    - name: Create Database
      working-directory: ./backend
      run: |
        touch database/database.sqlite
        
    - name: Generate key
      working-directory: ./backend
      run: php artisan key:generate
    
    - name: Directory Permissions
      working-directory: ./backend
      run: chmod -R 755 storage bootstrap/cache
    
    - name: Run Migrations
      working-directory: ./backend
      run: php artisan migrate --force
    
    - name: Run Tests
      working-directory: ./backend
      run: php artisan test
    
    - name: Security Audit
      working-directory: ./backend
      run: composer audit --no-dev
      continue-on-error: true

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests (Next.js)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test
    
    - name: Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Extract metadata (tags, labels) for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner on Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
      continue-on-error: true
    
    - name: Run Trivy vulnerability scanner on Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: '.'
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [backend-tests, frontend-tests, docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Starting production deployment..."
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}"
        
        # Deployment steps would include:
        # 1. Deploy backend container
        # 2. Run database migrations
        # 3. Deploy frontend container
        # 4. Update load balancer/proxy configuration
        # 5. Run health checks
        # 6. Rollback on failure
        
        echo "‚úÖ Production deployment completed successfully!"
    
    - name: Health Check
      run: |
        echo "üîç Running post-deployment health checks..."
        # Add actual health check commands here
        echo "‚úÖ All health checks passed!"
    
    - name: Rollback on Failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed! Initiating rollback..."
        # Add rollback commands here
        echo "üîÑ Rollback completed!"