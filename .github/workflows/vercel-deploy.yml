name: Vercel Deployment

on:
  workflow_call:
    inputs:
      backend-url:
        description: 'Backend API URL for frontend configuration'
        required: false
        type: string
        default: 'https://weeding-backend-production.up.railway.app'
      environment:
        description: 'Deployment environment (production/preview)'
        required: false
        type: string
        default: 'production'
    outputs:
      deployment-url:
        description: "Frontend deployment URL"
        value: ${{ jobs.deploy-frontend-vercel.outputs.deployment-url }}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      backend-url:
        description: 'Backend API URL for frontend configuration'
        required: false
        type: string
        default: 'https://weeding-backend-production.up.railway.app'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-frontend-vercel:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Vercel
    outputs:
      deployment-url: ${{ steps.set-output.outputs.deployment-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Set environment variables
      run: |
        # Determine deployment environment
        if [ "${{ github.event_name }}" = "workflow_call" ]; then
          ENV="${{ inputs.environment }}"
          API_URL="${{ inputs.backend-url }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="production"
          API_URL="${{ inputs.backend-url || 'https://weeding-backend-production.up.railway.app' }}"
        else
          ENV="preview"
          API_URL="${{ inputs.backend-url || 'https://weeding-backend-production.up.railway.app' }}"
        fi
        
        echo "DEPLOYMENT_ENV=$ENV" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_API_URL=$API_URL" >> $GITHUB_ENV
        
        echo "Deploying to: $ENV"
        echo "API URL: $API_URL"
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=${{ env.DEPLOYMENT_ENV }} --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./frontend
    
    - name: Build Project Artifacts
      working-directory: ./frontend
      run: vercel build ${{ env.DEPLOYMENT_ENV == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
    
    - name: Deploy Project Artifacts to Vercel
      working-directory: ./frontend
      run: |
        if [ "${{ env.DEPLOYMENT_ENV }}" = "production" ]; then
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
        else
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
        fi
        
        DEPLOYMENT_URL=$(cat deployment-url.txt)
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        echo "Frontend deployed to: $DEPLOYMENT_URL"
    
    - name: Set deployment output
      id: set-output
      run: |
        echo "deployment-url=${{ env.DEPLOYMENT_URL }}" >> $GITHUB_OUTPUT
    
    - name: Health check
      run: |
        # Wait for deployment to be available
        sleep 30
        
        echo "🔍 Performing health check on $DEPLOYMENT_URL"
        
        # Check if the frontend is responding
        for i in {1..6}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "401" ]; then
            echo "✅ Frontend health check passed - App is running! (code: $response)"
            break
          fi
          
          if [ "$i" -eq 6 ]; then
            echo "❌ Frontend health check failed - Response code: $response"
            exit 1
          fi
          
          echo "Waiting for frontend to be ready (Attempt $i)... Response: $response"
          sleep 10
        done
    
    - name: Deployment summary
      run: |
        echo "⚡ Vercel Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "===========================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Frontend URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ env.DEPLOYMENT_ENV }}" >> $GITHUB_STEP_SUMMARY
        echo "**Backend API:** ${{ env.NEXT_PUBLIC_API_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Features:**" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ Edge deployment with global CDN" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Automatic HTTPS" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 Mobile-optimized performance" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Serverless functions ready" >> $GITHUB_STEP_SUMMARY
        echo "- 🔗 Connected to Railway backend" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment deployment URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = process.env.DEPLOYMENT_URL;
          const apiUrl = process.env.NEXT_PUBLIC_API_URL;
          const comment = `## 🚀 Deployment Preview
          
          Your changes have been deployed to Vercel!
          
          **Preview URL:** ${deploymentUrl}
          **Backend API:** ${apiUrl}
          
          **Environment:** Preview
          **Status:** ✅ Ready
          
          This preview will update automatically when you push new changes to this PR.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });