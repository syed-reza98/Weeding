name: Railway Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  RAILWAY_PRIVATE_DOMAIN: weeding-backend.railway.internal
  RAILWAY_PROJECT_NAME: weeding
  RAILWAY_ENVIRONMENT_NAME: production
  RAILWAY_SERVICE_NAME: weeding-backend
  RAILWAY_PROJECT_ID: aa657bf5-3950-4119-b82e-d42bf3d5607b
  RAILWAY_ENVIRONMENT_ID: d6e59af0-9b1d-4210-a196-a031a32f9139
  RAILWAY_SERVICE_ID: c1031165-c408-45e4-8f1f-c5ce86ad6639

jobs:
  deploy-backend-railway:
    runs-on: ubuntu-latest
    name: Deploy Backend to Railway
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
    
    - name: Deploy to Railway
      run: |
        railway up --detach --service $RAILWAY_SERVICE_ID
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for deployment to be ready..."
        sleep 90
    
    - name: Run database migrations
      run: |
        railway run --service $RAILWAY_SERVICE_ID php artisan migrate --force
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Get deployment URL
      id: railway-url
      run: |
        DEPLOYMENT_URL=$(railway status --json --service $RAILWAY_SERVICE_ID | jq -r '.deployments[0].url // empty')
        if [ -z "$DEPLOYMENT_URL" ]; then
          DEPLOYMENT_URL="https://$(railway status --json --service $RAILWAY_SERVICE_ID | jq -r '.service.name // "weeding-backend"')-production.up.railway.app"
        fi
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Health check
      run: |
        # Wait for app to be fully available
        sleep 30
        
        echo "🔍 Performing health check on $DEPLOYMENT_URL"
        
        # Check if the API is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Backend health check passed - API is running!"
        else
          echo "❌ Backend health check failed - Response code: $response"
          echo "🔍 Checking Railway logs..."
          railway logs --service $RAILWAY_SERVICE_ID
          exit 1
        fi
    
    - name: Deployment summary
      run: |
        echo "🚂 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "=============================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Backend URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**API Endpoint:** ${{ env.DEPLOYMENT_URL }}/api" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Features:**" >> $GITHUB_STEP_SUMMARY
        echo "- 🗄️ Automatic PostgreSQL database" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Zero-downtime deployments" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Built-in metrics and monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Automatic HTTPS" >> $GITHUB_STEP_SUMMARY
