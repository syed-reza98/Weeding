name: Railway Deployment

on:
  workflow_call:
  workflow_dispatch:

env:
  RAILWAY_TOKEN: a8f51a95-d3bb-4287-935e-7ad45bc6038c
  RAILWAY_PRIVATE_DOMAIN: weeding-backend.railway.internal
  RAILWAY_PROJECT_NAME: weeding
  RAILWAY_ENVIRONMENT_NAME: production
  RAILWAY_SERVICE_NAME: weeding-backend
  RAILWAY_PROJECT_ID: aa657bf5-3950-4119-b82e-d42bf3d5607b
  RAILWAY_ENVIRONMENT_ID: d6e59af0-9b1d-4210-a196-a031a32f9139
  RAILWAY_SERVICE_ID: c1031165-c408-45e4-8f1f-c5ce86ad6639  # Kept for reference, using SERVICE_NAME now

jobs:
  deploy-backend-railway:
    runs-on: ubuntu-latest
    name: Deploy Backend to Railway
    outputs:
      deployment-url: ${{ steps.railway-url.outputs.deployment_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Authenticate with GHCR (not needed for direct Railway deployment)
        run: |
          echo "ℹ️ Direct Railway deployment - GHCR authentication not required"

      - name: Verify Railway Project and Create Service if Needed
        run: |
          echo "🚂 Setting up Railway deployment..."
          echo "Project: $RAILWAY_PROJECT_NAME"
          echo "Service: $RAILWAY_SERVICE_NAME"
          echo "Project ID: $RAILWAY_PROJECT_ID"
          
          # First, authenticate and check if Railway CLI is working
          echo "🔐 Testing Railway CLI authentication..."
          if ! railway whoami; then
            echo "❌ Railway authentication failed. Please check RAILWAY_TOKEN secret."
            exit 1
          fi
          
          # Try to link to the project
          echo "🔗 Linking to Railway project..."
          if ! railway link $RAILWAY_PROJECT_ID; then
            echo "❌ Failed to link to project ID: $RAILWAY_PROJECT_ID"
            echo "🔍 Listing available projects..."
            railway project list || echo "Could not list projects"
            exit 1
          fi
          
          # Verify project link worked
          echo "✅ Successfully linked to Railway project"
          echo "📋 Project information:"
          railway status || echo "Could not get project status"
          
          # List available services
          echo "📋 Available services:"
          SERVICES=$(railway status --json | jq -r '.services[]?.name // empty' 2>/dev/null || echo "")
          if [ -z "$SERVICES" ]; then
            echo "⚠️ No services found in project"
          else
            echo "$SERVICES"
          fi
          
          # Check if our target service exists
          SERVICE_EXISTS=$(railway status --json | jq -r '.services[]? | select(.name=="'$RAILWAY_SERVICE_NAME'") | .name' 2>/dev/null || echo "")
          
          if [ -z "$SERVICE_EXISTS" ]; then
            echo "⚠️ Service '$RAILWAY_SERVICE_NAME' not found. Creating it..."
            
            # Create the service
            echo "🏗️ Creating new service: $RAILWAY_SERVICE_NAME"
            if railway service create $RAILWAY_SERVICE_NAME; then
              echo "✅ Service '$RAILWAY_SERVICE_NAME' created successfully"
            else
              echo "❌ Failed to create service '$RAILWAY_SERVICE_NAME'"
              echo "💡 Trying alternative service creation method..."
              
              # Alternative: Create service during deployment
              echo "🚀 Will create service during first deployment"
            fi
          else
            echo "✅ Service '$RAILWAY_SERVICE_NAME' already exists"
          fi
          
          # List services again after potential creation
          echo "📋 Final service list:"
          railway status --json | jq -r '.services[]? | "\(.name): \(.id)"' 2>/dev/null || echo "Could not list services with details"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Railway
        run: |
          echo "🚀 Starting Railway deployment..."
          
          # Ensure we're in the correct directory with railway.toml
          if [ ! -f "railway.toml" ]; then
            echo "❌ railway.toml not found in current directory"
            ls -la
            exit 1
          fi
          
          echo "📁 Deployment configuration:"
          cat railway.toml
          
          # Deploy using the Railway CLI
          echo "🚂 Deploying with Railway CLI..."
          
          # Try deployment with service name first
          if railway up --detach --service $RAILWAY_SERVICE_NAME; then
            echo "✅ Deployment started successfully with service name"
          else
            echo "⚠️ Deployment with service name failed, trying without explicit service..."
            
            # If service doesn't exist, Railway will create it during deployment
            if railway up --detach; then
              echo "✅ Deployment started successfully (service created automatically)"
            else
              echo "❌ Deployment failed completely"
              echo "🔍 Debugging information:"
              railway status || echo "Could not get status"
              railway service list || echo "Could not list services"
              exit 1
            fi
          fi
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          
          # Poll for up to 5 minutes for deployment to be live
          for i in {1..60}; do
            # Get deployment status - try multiple approaches
            STATUS=""
            
            # Try to get status with service name
            if [ -n "$RAILWAY_SERVICE_NAME" ]; then
              STATUS=$(railway status --json 2>/dev/null | jq -r '.deployments[]? | select(.service.name=="'$RAILWAY_SERVICE_NAME'") | .status' 2>/dev/null | head -n1)
            fi
            
            # If no status found, try to get any recent deployment status
            if [ -z "$STATUS" ] || [ "$STATUS" = "null" ]; then
              STATUS=$(railway status --json 2>/dev/null | jq -r '.deployments[]? | .status' 2>/dev/null | head -n1)
            fi
            
            # If still no status, try alternative method
            if [ -z "$STATUS" ] || [ "$STATUS" = "null" ]; then
              STATUS=$(railway status 2>/dev/null | grep -i "deployment" | head -n1 || echo "UNKNOWN")
            fi
            
            echo "Deployment status (attempt $i/60): $STATUS"
            
            # Check for success conditions
            if [ "$STATUS" = "SUCCESS" ] || [ "$STATUS" = "ACTIVE" ] || [ "$STATUS" = "DEPLOYED" ]; then
              echo "✅ Deployment is live!"
              break
            fi
            
            # Check for failure conditions
            if [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "CRASHED" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              echo "🔍 Fetching deployment logs..."
              railway logs --service $RAILWAY_SERVICE_NAME --tail 100 2>/dev/null || railway logs --tail 100 2>/dev/null || echo "Could not fetch logs"
              exit 1
            fi
            
            # Timeout after 5 minutes
            if [ "$i" -eq 60 ]; then
              echo "⏰ Deployment did not become live within 5 minutes."
              echo "🔍 Final status check and logs:"
              railway status || echo "Could not get final status"
              railway logs --service $RAILWAY_SERVICE_NAME --tail 100 2>/dev/null || railway logs --tail 100 2>/dev/null || echo "Could not fetch logs"
              exit 1
            fi
            
            sleep 5
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run database migrations
        run: |
          echo "🔄 Database migrations are handled automatically in Dockerfile.railway startup command"
          echo "Migrations run as part of the container startup process"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Get deployment URL
        id: railway-url
        run: |
          echo "🔗 Retrieving deployment URL..."
          
          # Try multiple methods to get the deployment URL
          DEPLOYMENT_URL=""
          
          # Method 1: Try to get URL from service deployments
          if [ -n "$RAILWAY_SERVICE_NAME" ]; then
            DEPLOYMENT_URL=$(railway status --json 2>/dev/null | jq -r '.deployments[]? | select(.service.name=="'$RAILWAY_SERVICE_NAME'") | .url' 2>/dev/null | head -n1)
          fi
          
          # Method 2: Try to get any deployment URL
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            DEPLOYMENT_URL=$(railway status --json 2>/dev/null | jq -r '.deployments[]? | .url' 2>/dev/null | head -n1)
          fi
          
          # Method 3: Try to get domain from service
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            DOMAIN=$(railway status --json 2>/dev/null | jq -r '.services[]? | select(.name=="'$RAILWAY_SERVICE_NAME'") | .domains[]?' 2>/dev/null | head -n1)
            if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "null" ]; then
              DEPLOYMENT_URL="https://$DOMAIN"
            fi
          fi
          
          # Method 4: Use fallback URL if nothing found
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            echo "⚠️ Could not determine deployment URL from Railway status, using fallback"
            DEPLOYMENT_URL="https://weeding-backend-production.up.railway.app"
          fi
          
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "✅ Railway deployment URL: $DEPLOYMENT_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Health check
        run: |
          echo "🔍 Performing health check on $DEPLOYMENT_URL"
          for i in {1..12}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health" || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Backend health check passed - API is running!"
              exit 0
            fi
            echo "Waiting for health check to pass (Attempt $i)... Response: $response"
            sleep 10
          done
          echo "❌ Backend health check failed - Response code: $response"
          echo "🔍 Checking Railway logs..."
          railway logs --service $RAILWAY_SERVICE_NAME --tail 50 || echo "Could not fetch logs"
          exit 1
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deployment summary
        run: |
          echo "🚂 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "=============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** ${{ env.DEPLOYMENT_URL }}/api" >> $GITHUB_STEP_SUMMARY
          echo "**Container Deployment:** Railway-optimized Dockerfile.railway" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🗄️ Automatic PostgreSQL database" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Zero-downtime deployments" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Built-in metrics and monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Automatic HTTPS" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Railway-optimized container deployment" >> $GITHUB_STEP_SUMMARY
        env:
          DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
