name: Railway Deployment

on:
  workflow_call:
    inputs:
      backend-image:
        description: 'Backend container image to deploy'
        required: true
        type: string
  workflow_dispatch:

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  RAILWAY_PRIVATE_DOMAIN: weeding-backend.railway.internal
  RAILWAY_PROJECT_NAME: weeding
  RAILWAY_ENVIRONMENT_NAME: production
  RAILWAY_SERVICE_NAME: weeding-backend
  RAILWAY_PROJECT_ID: aa657bf5-3950-4119-b82e-d42bf3d5607b
  RAILWAY_ENVIRONMENT_ID: d6e59af0-9b1d-4210-a196-a031a32f9139
  RAILWAY_SERVICE_ID: c1031165-c408-45e4-8f1f-c5ce86ad6639

jobs:
  deploy-backend-railway:
    runs-on: ubuntu-latest
    name: Deploy Backend to Railway
    outputs:
      deployment-url: ${{ steps.railway-url.outputs.deployment_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Authenticate with GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy to Railway using GHCR image
        run: |
          # Update Railway service to use the GHCR image
          echo "Using container image: ${{ inputs.backend-image || 'ghcr.io/${{ github.repository }}/backend:latest' }}"
          
          # Create a temporary Dockerfile that uses the GHCR image
          cat > Dockerfile.railway << EOF
          FROM ${{ inputs.backend-image || 'ghcr.io/${{ github.repository }}/backend:latest' }}
          WORKDIR /var/www/html
          EXPOSE \$PORT
          CMD ["php", "artisan", "serve", "--host=0.0.0.0", "--port=\$PORT"]
          EOF
          
          # Deploy using the Railway CLI
          railway up --detach --service $RAILWAY_SERVICE_ID --dockerfile Dockerfile.railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment to be ready
        run: |
          # Poll for up to 3 minutes for deployment to be live
          for i in {1..36}; do
            STATUS=$(railway status --json | jq -r '.deployments[] | select(.service.name=="weeding-backend") | .status' | head -n1)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "SUCCESS" ] || [ "$STATUS" = "ACTIVE" ]; then
              echo "Deployment is live!"
              break
            fi
            if [ "$i" -eq 36 ]; then
              echo "Deployment did not become live in time."
              railway logs --service $RAILWAY_SERVICE_ID
              exit 1
            fi
            sleep 5
          done
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run database migrations
        run: |
          # Run migrations on Railway
          railway run --service $RAILWAY_SERVICE_ID -- php artisan migrate --force
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Get deployment URL
        id: railway-url
        run: |
          DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[] | select(.service.name=="weeding-backend") | .url' | head -n1)
          if [ -z "$DEPLOYMENT_URL" ] || [ "$DEPLOYMENT_URL" = "null" ]; then
            DEPLOYMENT_URL="https://weeding-backend-production.up.railway.app"
          fi
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Railway deployment URL: $DEPLOYMENT_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Health check
        run: |
          echo "🔍 Performing health check on $DEPLOYMENT_URL"
          for i in {1..12}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health" || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Backend health check passed - API is running!"
              exit 0
            fi
            echo "Waiting for health check to pass (Attempt $i)... Response: $response"
            sleep 10
          done
          echo "❌ Backend health check failed - Response code: $response"
          echo "🔍 Checking Railway logs..."
          railway logs --service $RAILWAY_SERVICE_ID --tail 50
          exit 1
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deployment summary
        run: |
          echo "🚂 Railway Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "=============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**API Endpoint:** ${{ env.DEPLOYMENT_URL }}/api" >> $GITHUB_STEP_SUMMARY
          echo "**Container Image:** ${{ inputs.backend-image || 'ghcr.io/${{ github.repository }}/backend:latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🗄️ Automatic PostgreSQL database" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Zero-downtime deployments" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Built-in metrics and monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Automatic HTTPS" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 GHCR container deployment" >> $GITHUB_STEP_SUMMARY
        env:
          DEPLOYMENT_URL: ${{ env.DEPLOYMENT_URL }}
