name: Heroku Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  HEROKU_APP_NAME_BACKEND: ${{ secrets.HEROKU_APP_NAME_BACKEND }}
  HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

jobs:
  deploy-backend-heroku:
    runs-on: ubuntu-latest
    name: Deploy Backend to Heroku
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Heroku Container Registry
      uses: docker/login-action@v3
      with:
        registry: registry.heroku.com
        username: _
        password: ${{ secrets.HEROKU_API_KEY }}
    
    - name: Build and push Backend Docker image to Heroku
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.heroku
        push: true
        tags: registry.heroku.com/${{ env.HEROKU_APP_NAME_BACKEND }}/web
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
    
    - name: Deploy to Heroku
      run: |
        echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=_ --password-stdin registry.heroku.com
        heroku container:release web --app ${{ env.HEROKU_APP_NAME_BACKEND }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    
    - name: Run database migrations
      run: |
        heroku run php artisan migrate --force --app ${{ env.HEROKU_APP_NAME_BACKEND }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    
    - name: Health check
      run: |
        # Wait for app to be available
        sleep 30
        
        APP_URL="https://${{ env.HEROKU_APP_NAME_BACKEND }}.herokuapp.com"
        
        echo "🔍 Performing health check on $APP_URL"
        
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/api/health" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Backend health check passed - App is running!"
        else
          echo "❌ Backend health check failed - Response code: $response"
          echo "🔍 Checking app logs..."
          heroku logs --tail --app ${{ env.HEROKU_APP_NAME_BACKEND }}
          exit 1
        fi
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    
    - name: Deployment summary
      run: |
        echo "🚀 Heroku Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "============================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Backend URL:** https://${{ env.HEROKU_APP_NAME_BACKEND }}.herokuapp.com" >> $GITHUB_STEP_SUMMARY
        echo "**API Endpoint:** https://${{ env.HEROKU_APP_NAME_BACKEND }}.herokuapp.com/api" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Configure your frontend to use the backend API URL" >> $GITHUB_STEP_SUMMARY
        echo "- Set up environment variables in Heroku dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- Configure PostgreSQL database if not already done" >> $GITHUB_STEP_SUMMARY