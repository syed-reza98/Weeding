# Laravel Backend Dockerfile for Heroku - Optimized
FROM php:8.2-fpm-alpine

# Install system dependencies and PHP extensions in one layer
RUN apk add --no-cache --virtual .build-deps \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    postgresql-dev \
    $PHPIZE_DEPS \
    && apk add --no-cache \
    libpng \
    libxml2 \
    postgresql-libs \
    nginx \
    supervisor \
    curl \
    && docker-php-ext-install -j$(nproc) \
    pdo \
    pdo_pgsql \
    pdo_mysql \
    gd \
    xml \
    bcmath \
    opcache \
    && apk del .build-deps

# Configure OPcache for production
RUN { \
    echo 'opcache.enable=1'; \
    echo 'opcache.enable_cli=1'; \
    echo 'opcache.memory_consumption=128'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=4000'; \
    echo 'opcache.revalidate_freq=2'; \
    echo 'opcache.fast_shutdown=1'; \
    } > /usr/local/etc/php/conf.d/opcache-recommended.ini

# Install Composer
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www/html

# Copy composer files first for better caching
COPY composer.json composer.lock ./

# Install PHP dependencies with optimizations
RUN composer install \
    --no-dev \
    --optimize-autoloader \
    --no-interaction \
    --no-scripts \
    --no-ansi \
    --prefer-dist \
    && composer clear-cache

# Copy application code
COPY . .

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Create required directories
RUN mkdir -p /var/log/supervisor /var/log/nginx

# Copy Heroku-specific configurations
COPY ./deploy/heroku/nginx.conf /etc/nginx/nginx.conf
COPY ./deploy/heroku/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Generate application key and cache configurations
RUN if [ ! -f .env ]; then cp .env.heroku .env; fi \
    && composer dump-autoloader --optimize \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Create a health check endpoint script
RUN echo '#!/bin/sh\ncurl -f http://localhost:${PORT:-8000}/api/health || exit 1' > /usr/local/bin/healthcheck.sh \
    && chmod +x /usr/local/bin/healthcheck.sh

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Use the PORT environment variable provided by Heroku
EXPOSE ${PORT:-8000}

# Create entrypoint script for Heroku
RUN echo '#!/bin/sh\n\
set -e\n\
echo "ðŸš€ Starting Laravel on Heroku..."\n\
\n\
# Update nginx config with PORT\n\
envsubst < /etc/nginx/nginx.conf > /tmp/nginx.conf && mv /tmp/nginx.conf /etc/nginx/nginx.conf\n\
\n\
# Generate application key if not set\n\
if ! grep -q "APP_KEY=base64:" .env; then\n\
    php artisan key:generate --force\n\
fi\n\
\n\
# Run database migrations\n\
php artisan migrate --force\n\
\n\
# Clear and cache configurations\n\
php artisan config:cache\n\
php artisan route:cache\n\
php artisan view:cache\n\
\n\
echo "âœ… Laravel is ready!"\n\
\n\
# Start supervisord\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /usr/local/bin/heroku-entrypoint.sh \
    && chmod +x /usr/local/bin/heroku-entrypoint.sh

# Start the application
CMD ["/usr/local/bin/heroku-entrypoint.sh"]