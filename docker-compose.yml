# Wedding Website Platform
# Multi-stage Docker setup for Laravel backend and Next.js frontend

version: '3.8'

services:
  # Laravel Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wedding-backend
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./backend:/var/www/html
      - ./backend/storage:/var/www/html/storage
      - backend_vendor:/var/www/html/vendor
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=sqlite
      - DB_DATABASE=/var/www/html/database/database.sqlite
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "php", "artisan", "route:list", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend (Development)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: wedding-frontend-dev
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wedding-network
    profiles:
      - development

  # Next.js Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wedding-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: wedding-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes

  # Database backup service
  db-backup:
    image: alpine:latest
    container_name: wedding-db-backup
    restart: "no"
    volumes:
      - ./backend/database:/source
      - ./backups:/backup
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        mkdir -p /backup &&
        cp /source/database.sqlite /backup/database-backup-$$(date +%Y%m%d-%H%M%S).sqlite &&
        echo 'Database backup completed'
      "
    depends_on:
      - backend
    networks:
      - wedding-network
    profiles:
      - backup

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: wedding-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  backend_vendor:
    driver: local

networks:
  wedding-network:
    driver: bridge